-------------------------------------------------------------------------Dutch National Flag Algorithm (Three-Way Partitioning)---------------------------------------------------------------------------------------
Problem Statement:
Sort an array containing three distinct elements (commonly 0, 1, and 2) in linear time (O(n)) and constant space (O(1)). The goal is to arrange the array so that all 0s come first, followed by 1s, and then 2s.

Use Cases:
Sorting arrays with three unique categories.
Partitioning based on three distinct values.
Approach:
Use three pointers to divide the array into four sections:
Low (low): All elements before low are 0s.
Mid (mid): Current element under consideration.
High (high): All elements after high are 2s.
Unsorted: Elements between mid and high are unsorted.
Algorithm Steps:
Initialize Pointers:
low = 0
mid = 0
high = n - 1 (where n is the length of the array)
Iterate Through the Array:
While mid <= high:
Case 1: If arr[mid] == 0
Swap arr[low] and arr[mid]
Increment both low and mid (low += 1, mid += 1)
Case 2: If arr[mid] == 1
Move to the next element (mid += 1)
Case 3: If arr[mid] == 2
Swap arr[mid] and arr[high]
Decrement high (high -= 1)
Note: Do not increment mid here because the swapped element needs to be evaluated.
Code Example (Python):
python
Copy code
def dutch_national_flag(arr):
    low, mid = 0, 0
    high = len(arr) - 1
    
    while mid <= high:
        if arr[mid] == 0:
            arr[low], arr[mid] = arr[mid], arr[low]
            low += 1
            mid += 1
        elif arr[mid] == 1:
            mid += 1
        else:  # arr[mid] == 2
            arr[mid], arr[high] = arr[high], arr[mid]
            high -= 1
    return arr
# Example Usage
arr = [2, 0, 1, 2, 1, 0]
sorted_arr = dutch_national_flag(arr)
print(sorted_arr)  # Output: [0, 0, 1, 1, 2, 2]
Time and Space Complexity:
Time Complexity: O(n) – Single pass through the array.
Space Complexity: O(1) – In-place sorting without extra space.
Example Walkthrough:
Input: [2, 0, 1, 2, 1, 0]
Initial State:
low = 0, mid = 0, high = 5
Array: [2, 0, 1, 2, 1, 0]
Iteration 1 (mid = 0):
arr[mid] = 2
Swap arr[0] and arr[5] → [0, 0, 1, 2, 1, 2]
Decrement high to 4
mid remains 0 to check the swapped element.
Iteration 2 (mid = 0):
arr[mid] = 0
Swap arr[0] and arr[0] (no change)
Increment low to 1 and mid to 1
Iteration 3 (mid = 1):
arr[mid] = 0
Swap arr[1] and arr[1] (no change)
Increment low to 2 and mid to 2
Iteration 4 (mid = 2):
arr[mid] = 1
Increment mid to 3
Iteration 5 (mid = 3):
arr[mid] = 2
Swap arr[3] and arr[4] → [0, 0, 1, 1, 2, 2]
Decrement high to 3
mid remains 3 to check the swapped element.
Iteration 6 (mid = 3):
arr[mid] = 1
Increment mid to 4
Final Sorted Array: [0, 0, 1, 1, 2, 2]
Key Points:
Three Pointers: low, mid, and high help partition the array into three sections.
In-Place Sorting: No additional space is required; swaps are done within the original array.
Single Pass: Efficiently sorts the array in one traversal.
Handling 2s: When encountering a 2, swap with high and reduce the search space from the end.
Stable Handling: Ensures that all 0s are moved to the front and all 2s to the end, with 1s naturally in the middle.
When to Use:
When you need to sort or partition an array with exactly three distinct elements.
Useful in problems requiring categorization or segregation of elements based on three conditions.
Visual Summary:
vbnet
Copy code
Initial Array: [2, 0, 1, 2, 1, 0]
low = 0, mid = 0, high = 5
Step 1: Swap mid and high (2 ↔ 0)
Array: [0, 0, 1, 2, 1, 2]
low = 0, mid = 0, high = 4
Step 2: Swap mid and low (0 ↔ 0)
Array: [0, 0, 1, 2, 1, 2]
low = 1, mid = 1, high = 4
Step 3: Swap mid and low (0 ↔ 0)
Array: [0, 0, 1, 2, 1, 2]
low = 2, mid = 2, high = 4
Step 4: Move mid (1 is in correct place)
Array: [0, 0, 1, 2, 1, 2]
low = 2, mid = 3, high = 4
Step 5: Swap mid and high (2 ↔ 1)
Array: [0, 0, 1, 1, 2, 2]
low = 2, mid = 3, high = 3
Step 6: Move mid (1 is in correct place)
Final Array: [0, 0, 1, 1, 2, 2]
Tips for Interview:
Understand the Invariant: At any point during the algorithm, everything before low is 0, everything after high is 2, and everything between low and mid is 1.
Edge Cases: Handle arrays with all elements same, already sorted, or not rotated.
Explain Your Steps: Clearly articulate how and why you move the pointers during the interview.
Practice Variations: Sometimes, the problem may involve different values or more complex conditions. Understand how to adapt the three-pointer technique.
Further Reading:
LeetCode Problem - Sort Colors
GeeksforGeeks - Dutch National Flag Problem
------------------------------------------------------------------Reversal Algorithm for Array Rotation (Both Left and Right)-------------------------------------------------------------
Problem: Rotate an array to the left or right by d positions.

Purpose: Efficiently rotate the array using reversals, with minimal space and time complexity.

Steps to Rotate Left by d Positions:
   Reverse the first d elements.
   Reverse the remaining n-d elements.
   Reverse the entire array.
Steps to Rotate Right by d Positions:
   Reverse the last d elements.
   Reverse the first n-d elements.
   Reverse the entire array.
Code Example:
python
Copy code
# Helper function to reverse array from index start to end
def reverse(arr, start, end):
    while start < end:
        arr[start], arr[end] = arr[end], arr[start]
        start += 1
        end -= 1

# Rotate array to the left by d positions
def rotate_left(arr, d):
    n = len(arr)
    d = d % n  # Handle cases where d > n
    reverse(arr, 0, d-1)      # Reverse first d elements
    reverse(arr, d, n-1)      # Reverse remaining elements
    reverse(arr, 0, n-1)      # Reverse the entire array

# Rotate array to the right by d positions
def rotate_right(arr, d):
    n = len(arr)
    d = d % n  # Handle cases where d > n
    reverse(arr, n-d, n-1)    # Reverse last d elements
    reverse(arr, 0, n-d-1)    # Reverse the first n-d elements
    reverse(arr, 0, n-1)      # Reverse the entire array
Time Complexity:
O(n) (Three reversals, each taking O(n) time)
Space Complexity:
O(1) (In-place rotation, no extra space)
Example:
Rotate Left:

Input: [1, 2, 3, 4, 5, 6, 7], d = 3
Output: [4, 5, 6, 7, 1, 2, 3]
Rotate Right:

Input: [1, 2, 3, 4, 5, 6, 7], d = 2
Output: [6, 7, 1, 2, 3, 4, 5]
----------------------------------------------Moore’s Voting Algorithm:------------------------------------------------------
Purpose: Find the majority element in an array (an element that appears more than n/2 times).

Key Idea: Uses a single pass and constant space to determine the candidate for majority element.

Steps:
Candidate Selection:

Initialize candidate and count to None and 0, respectively.
Traverse the array:
If count is 0, set candidate to the current element.
If the current element is the same as candidate, increment count.
Otherwise, decrement count.
Verification (Optional but recommended):

Traverse the array again to count occurrences of the candidate and check if it appears more than n/2 times.
Code Example:
python
Copy code
def moore_voting_algorithm(arr):
    # Step 1: Find the candidate
    candidate = None
    count = 0
    for num in arr:
        if count == 0:
            candidate = num
        count += (1 if num == candidate else -1)
    
    # Step 2: Verify the candidate
    count = 0
    for num in arr:
        if num == candidate:
            count += 1
    if count > len(arr) // 2:
        return candidate
    return None  # No majority element
Time Complexity:
O(n) (Single pass for candidate selection and verification)
Space Complexity:
O(1) (Constant space)
Example:
Input: [3, 3, 4, 2, 4, 4, 2, 4, 4]
Output: 4 (since 4 appears more than n/2 times)
----------------------------------------------Kadane's Algorithm--------------------------------------------------------------
Purpose: Find the maximum sum of a contiguous subarray in an array of integers.

Key Idea:
Traverse the array while keeping track of the current subarray sum and the maximum sum found so far.
Steps:
Initialize max_current and max_global as the first element of the array.
Traverse the array starting from the second element:
Update max_current as the maximum of the current element or max_current + current element.
If max_current > max_global, update max_global.
max_global will hold the maximum sum at the end.
Code Example:
python
Copy code
def kadanes_algorithm(arr):
    max_current = max_global = arr[0]
    for num in arr[1:]:
        max_current = max(num, max_current + num)
        if max_current > max_global:
            max_global = max_current
    return max_global
Time Complexity:
O(n) (Single pass through the array)
Space Complexity:
O(1) (Constant space)
Example:
Input: [-2, 1, -3, 4, -1, 2, 1, -5, 4]
Output: 6 (subarray [4, -1, 2, 1] has the maximum sum)
------------------------------------------------------Sweep Line Algorithm: Flight Booking Problem Notes----------------------------------------------------
The sweep line algorithm is an efficient approach used to solve interval or range-based problems. It works by keeping track of cumulative changes at specific points and propagating these changes over a range, typically using a difference array. This is useful in problems where multiple overlapping intervals need to be handled, such as booking seats on multiple flights.

Problem Statement:
Given n flights and several flight bookings, where each booking specifies a start flight, an end flight, and a number of seats to be booked for every flight in the range, the task is to return an array representing the total number of seats booked for each flight.

Approach:
This problem can be solved using a sweep line (difference array) technique to manage cumulative seat reservations efficiently.

Difference Array Concept:

Use a difference array (diffArr) to record changes only at the boundaries of each booking.
Increment the start of a range with the number of seats booked.
Decrement right after the end of the range to balance the increment made earlier.
Final Seat Count:

Once all bookings are processed, calculate the actual number of seats booked for each flight using a prefix sum on the difference array.
The prefix sum converts the difference array into the cumulative seat reservations for each flight.
Algorithm:
Input Parsing:

Parse the input which contains a list of bookings and the number of flights n.
Difference Array Initialization:

Initialize a difference array diffArr of size n + 1 (extra element to handle out-of-bounds cases).
Bookings Processing:

For each booking, increment the start - 1 position by the number of seats booked.
Decrement the end position (i.e., one position after the end of the flight range) by the number of seats to balance the increment.
Prefix Sum Calculation:

Iterate over the difference array and calculate the prefix sum to obtain the total seat count for each flight.
Time Complexity:
Time Complexity: O(n + k) where n is the number of flights and k is the number of bookings.
Space Complexity: O(n) due to the difference array.
Python Code:
python
Copy code
from typing import List

class Solution:
    def corpFlightBookings(self, bookings: List[List[int]], n: int) -> List[int]:
        # Initialize a difference array with zeros
        diffArr = [0] * (n + 1)

        # Process each booking
        for start, end, seats in bookings:
            diffArr[start - 1] += seats  # Increment seats at the start of the range
            if end < n:
                diffArr[end] -= seats     # Decrement seats right after the end of the range

        # Calculate the final number of seats using prefix sum
        for i in range(1, n):
            diffArr[i] += diffArr[i - 1]  # Prefix sum to get total seats per flight

        # Return the result for flights 1 to n
        return diffArr[:n]
Example:
Input:

python
Copy code
bookings = [[1, 2, 10], [2, 3, 20], [2, 5, 25]]
n = 5
Step-by-Step Execution:

Initial difference array: [0, 0, 0, 0, 0, 0]
After processing the first booking [1, 2, 10]:
diffArr = [10, 0, -10, 0, 0, 0]
After processing the second booking [2, 3, 20]:
diffArr = [10, 20, -10, -20, 0, 0]
After processing the third booking [2, 5, 25]:
diffArr = [10, 45, -10, -20, 0, -25]
Prefix Sum Calculation:
result = [10, 55, 45, 25, 25]
Final Output:

python
Copy code
[10, 55, 45, 25, 25]
Summary:
Step 1: Initialize the difference array.
Step 2: Apply changes at the start and end positions of each booking.
Step 3: Use a prefix sum to compute the final number of seats reserved for each flight.
This approach is highly efficient, making it suitable for large datasets, as it avoids direct updates to each flight in a range and reduces the time complexity
